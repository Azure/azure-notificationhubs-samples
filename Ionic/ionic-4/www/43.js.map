{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/legacy/ion-input-ios.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6F;AACjG;AACiC;AACe;AAC7E;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA,QAAQ,4DAAgB;AACxwBAAwB,4DAAW;AACnC,yBAAyB,4DAAW;AACpC,uBAAuB,4DAAW;AAClC,wBAAwB,4DAAW;AACnC,+BAA+B,4DAAW;AAC1C,iCAAiC,4DAAW;AAC5C,wBAAwB,4DAAW;AACnC;AACA;AACA,yBAAyB,4DAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAU;AAC7B;AACA;AACA,mCAAmC,EAAE,4DAAkB,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAa;AACjC;AACA;AACA;AACA;AACA,YAAY,4DAAC,WAAW,+CAA+C,kCAAkC,EAAE,+oBAA+oB;AAC1vB,qEAAqE,4DAAC,YAAY,iIAAiI;AACnN;AACA;AACA;AACA,0BAA0B,QAAQ,4DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,0CAA0C,QAAQ,4DAAC,CAAC,oDAAI,4CAA4C;AACpG;AACA,0BAA0B,6BAA6B,4BAA4B,iCAAiC,kCAAkC,yBAAyB,gBAAgB,gBAAgB,mBAAmB,yBAAyB,gBAAgB,oBAAoB,aAAa,kBAAkB,WAAW,OAAO,sBAAsB,mBAAmB,WAAW,oBAAoB,6BAA6B,mBAAmB,2CAA2C,UAAU,4FAA4F,kBAAkB,8BAA8B,4BAA4B,+BAA+B,mCAAmC,kCAAkC,iCAAiC,+BAA+B,qCAAqC,oBAAoB,kBAAkB,mBAAmB,oBAAoB,uBAAuB,wBAAwB,sBAAsB,uBAAuB,mBAAmB,oBAAoB,cAAc,qBAAqB,WAAW,OAAO,WAAW,eAAe,gBAAgB,SAAS,aAAa,uBAAuB,8BAA8B,sBAAsB,wBAAwB,qBAAqB,gBAAgB,6FAA6F,+BAA+B,mBAAmB,oBAAoB,2CAA2C,0CAA0C,uCAAuC,uCAAuC,0DAA0D,+BAA+B,oBAAoB,yCAAyC,2CAA2C,mCAAmC,iDAAiD,+BAA+B,oBAAoB,yCAAyC,2CAA2C,mCAAmC,qDAAqD,+BAA+B,oBAAoB,yCAAyC,2CAA2C,mCAAmC,sDAAsD,+BAA+B,oBAAoB,yCAAyC,2CAA2C,mCAAmC,4CAA4C,+BAA+B,oBAAoB,yCAAyC,2CAA2C,mCAAmC,gDAAgD,6BAA6B,uCAAuC,wBAAwB,gBAAgB,0CAA0C,aAAa,yCAAyC,WAAW,+BAA+B,OAAO,MAAM,kBAAkB,oBAAoB,qLAAqL,WAAW,YAAY,QAAQ,mCAAmC,cAAc,eAAe,aAAa,gBAAgB,eAAe,gBAAgB,cAAc,iBAAiB,wBAAwB,SAAS,aAAa,6BAA6B,4BAA4B,kBAAkB,wBAAwB,qBAAqB,gBAAgB,2EAA2E,mBAAmB,8BAA8B,oBAAoB,8JAA8J,oBAAoB,oBAAoB,mBAAmB,kBAAkB,sBAAsB,kBAAkB,kBAAkB,mKAAmK,kBAAkB,qBAAqB,oBAAoB,mCAAmC,0CAA0C,2ZAA2Z,WAAW,YAAY,qBAAqB,EAAE,EAAE;AAC9vJ;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AAC8B","file":"43.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { r as registerInstance, c as createEvent, d as getIonMode, h, e as getElement, H as Host } from './chunk-f257aad1.js';\nimport './chunk-1074393c.js';\nimport { c as createColorClasses } from './chunk-9d21e8e5.js';\nimport { d as debounceEvent, f as findItemLabel } from './chunk-d102c9d1.js';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nvar Input = /** @class */ (function () {\n    function Input(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.inputId = \"ion-input-\" + inputIds++;\n        this.didBlurAfterEdit = false;\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         */\n        this.autocapitalize = 'off';\n        /**\n         * Indicates whether the value of the control can be automatically completed by the browser.\n         */\n        this.autocomplete = 'off';\n        /**\n         * Whether auto correction should be enabled when the user is entering/editing the text value.\n         */\n        this.autocorrect = 'off';\n        /**\n         * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n         */\n        this.clearInput = false;\n        /**\n         * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * If `true`, the user cannot interact with the input.\n         */\n        this.disabled = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the user must fill in a value before submitting a form.\n         */\n        this.required = false;\n        /**\n         * If `true`, the element will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * The type of control to display. The default type is text.\n         */\n        this.type = 'text';\n        /**\n         * The value of the input.\n         */\n        this.value = '';\n        this.onInput = function (ev) {\n            var input = ev.target;\n            if (input) {\n                _this.value = input.value || '';\n            }\n            _this.ionInput.emit(ev);\n        };\n        this.onBlur = function () {\n            _this.hasFocus = false;\n            _this.focusChanged();\n            _this.emitStyle();\n            _this.ionBlur.emit();\n        };\n        this.onFocus = function () {\n            _this.hasFocus = true;\n            _this.focusChanged();\n            _this.emitStyle();\n            _this.ionFocus.emit();\n        };\n        this.onKeydown = function () {\n            if (_this.clearOnEdit) {\n                // Did the input value change after it was blurred and edited?\n                if (_this.didBlurAfterEdit && _this.hasValue()) {\n                    // Clear the input\n                    _this.clearTextInput();\n                }\n                // Reset the flag\n                _this.didBlurAfterEdit = false;\n            }\n        };\n        this.clearTextInput = function (ev) {\n            if (_this.clearInput && !_this.readonly && !_this.disabled && ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            _this.value = '';\n            /**\n             * This is needed for clearOnEdit\n             * Otherwise the value will not be cleared\n             * if user is inside the input\n             */\n            if (_this.nativeInput) {\n                _this.nativeInput.value = '';\n            }\n        };\n        this.ionInput = createEvent(this, \"ionInput\", 7);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionInputDidLoad = createEvent(this, \"ionInputDidLoad\", 7);\n        this.ionInputDidUnload = createEvent(this, \"ionInputDidUnload\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    }\n    Input.prototype.debounceChanged = function () {\n        this.ionChange = debounceEvent(this.ionChange, this.debounce);\n    };\n    Input.prototype.disabledChanged = function () {\n        this.emitStyle();\n    };\n    /**\n     * Update the native input element when the value changes\n     */\n    Input.prototype.valueChanged = function () {\n        this.emitStyle();\n        this.ionChange.emit({ value: this.value });\n    };\n    Input.prototype.componentWillLoad = function () {\n        // By default, password inputs clear after focus when they have content\n        if (this.clearOnEdit === undefined && this.type === 'password') {\n            this.clearOnEdit = true;\n        }\n        this.emitStyle();\n    };\n    Input.prototype.componentDidLoad = function () {\n        this.debounceChanged();\n        this.ionInputDidLoad.emit();\n    };\n    Input.prototype.componentDidUnload = function () {\n        this.ionInputDidUnload.emit();\n    };\n    /**\n     * Sets focus on the specified `ion-input`. Use this method instead of the global\n     * `input.focus()`.\n     */\n    Input.prototype.setFocus = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.nativeInput) {\n                    this.nativeInput.focus();\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    Input.prototype.getInputElement = function () {\n        return Promise.resolve(this.nativeInput);\n    };\n    Input.prototype.getValue = function () {\n        return this.value || '';\n    };\n    Input.prototype.emitStyle = function () {\n        this.ionStyle.emit({\n            'interactive': true,\n            'input': true,\n            'has-placeholder': this.placeholder != null,\n            'has-value': this.hasValue(),\n            'has-focus': this.hasFocus,\n            'interactive-disabled': this.disabled,\n        });\n    };\n    Input.prototype.focusChanged = function () {\n        // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n        if (this.clearOnEdit && !this.hasFocus && this.hasValue()) {\n            this.didBlurAfterEdit = true;\n        }\n    };\n    Input.prototype.hasValue = function () {\n        return this.getValue().length > 0;\n    };\n    Input.prototype.hostData = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return {\n            'aria-disabled': this.disabled ? 'true' : null,\n            class: Object.assign({}, createColorClasses(this.color), (_a = {}, _a[mode] = true, _a['has-value'] = this.hasValue(), _a['has-focus'] = this.hasFocus, _a))\n        };\n    };\n    Input.prototype.__stencil_render = function () {\n        var _this = this;\n        var value = this.getValue();\n        var labelId = this.inputId + '-lbl';\n        var label = findItemLabel(this.el);\n        if (label) {\n            label.id = labelId;\n        }\n        return [\n            h(\"input\", { class: \"native-input\", ref: function (input) { return _this.nativeInput = input; }, \"aria-labelledby\": labelId, disabled: this.disabled, accept: this.accept, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellCheck: this.spellcheck, step: this.step, size: this.size, type: this.type, value: value, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown }),\n            (this.clearInput && !this.readonly && !this.disabled) && h(\"button\", { type: \"button\", class: \"input-clear-icon\", tabindex: \"-1\", onTouchStart: this.clearTextInput, onMouseDown: this.clearTextInput })\n        ];\n    };\n    Object.defineProperty(Input.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Input, \"watchers\", {\n        get: function () {\n            return {\n                \"debounce\": [\"debounceChanged\"],\n                \"disabled\": [\"disabledChanged\"],\n                \"value\": [\"valueChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Input.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };\n    Object.defineProperty(Input, \"style\", {\n        get: function () { return \".sc-ion-input-ios-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--background:transparent;--color:initial;display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;width:100%;padding:0!important;background:var(--background);color:var(--color);font-family:var(--ion-font-family,inherit);z-index:2}ion-item.sc-ion-input-ios-h:not(.item-label), ion-item:not(.item-label) .sc-ion-input-ios-h{--padding-start:0}.ion-color.sc-ion-input-ios-h{color:var(--ion-color-base)}.native-input.sc-ion-input-ios{border-radius:var(--border-radius);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:inline-block;-ms-flex:1;flex:1;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.native-input.sc-ion-input-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-input.sc-ion-input-ios::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-webkit-autofill{background-color:transparent}.native-input.sc-ion-input-ios:invalid{-webkit-box-shadow:none;box-shadow:none}.native-input.sc-ion-input-ios::-ms-clear{display:none}.native-input[disabled].sc-ion-input-ios{opacity:.4}.cloned-input.sc-ion-input-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-input-ios-h .cloned-input.sc-ion-input-ios, [dir=rtl] .sc-ion-input-ios-h .cloned-input.sc-ion-input-ios, [dir=rtl].sc-ion-input-ios .cloned-input.sc-ion-input-ios{left:unset;right:unset;right:0}.input-clear-icon.sc-ion-input-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;background-position:50%;border:0;outline:none;background-color:transparent;background-repeat:no-repeat;visibility:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.has-value.sc-ion-input-ios-h .input-clear-icon.sc-ion-input-ios{visibility:visible}.has-focus.sc-ion-input-ios-h{pointer-events:none}.has-focus.sc-ion-input-ios-h a.sc-ion-input-ios, .has-focus.sc-ion-input-ios-h button.sc-ion-input-ios, .has-focus.sc-ion-input-ios-h input.sc-ion-input-ios{pointer-events:auto}.sc-ion-input-ios-h{--padding-top:10px;--padding-end:8px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-floating.sc-ion-input-ios-h, .item-label-floating .sc-ion-input-ios-h, .item-label-stacked.sc-ion-input-ios-h, .item-label-stacked .sc-ion-input-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}.input-clear-icon.sc-ion-input-ios{background-image:url(\\\"data:image/svg+xml;charset=utf-8,<svg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20viewBox=\\'0%200%20512%20512\\'><path%20fill=\\'var(--ion-color-step-600,%20%23666666)\\'%20d=\\'M403.1,108.9c-81.2-81.2-212.9-81.2-294.2,0s-81.2,212.9,0,294.2c81.2,81.2,212.9,81.2,294.2,0S484.3,190.1,403.1,108.9z%20M352,340.2L340.2,352l-84.4-84.2l-84,83.8L160,339.8l84-83.8l-84-83.8l11.8-11.8l84,83.8l84.4-84.2l11.8,11.8L267.6,256L352,340.2z\\'/></svg>\\\");width:30px;height:30px;background-size:18px}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return Input;\n}());\nvar inputIds = 0;\nexport { Input as ion_input };\n"],"sourceRoot":""}