{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/legacy/ion-radio_2-ios.entry.js"],"names":[],"mappings":"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","file":"60.js","sourcesContent":["import { r as registerInstance, c as createEvent, d as getIonMode, h, H as Host, e as getElement } from './chunk-f257aad1.js';\nimport './chunk-1074393c.js';\nimport { c as createColorClasses, h as hostContext } from './chunk-9d21e8e5.js';\nimport { f as findItemLabel } from './chunk-d102c9d1.js';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nvar Radio = /** @class */ (function () {\n    function Radio(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.inputId = \"ion-rb-\" + radioButtonIds++;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot interact with the radio.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the radio is selected.\n         */\n        this.checked = false;\n        this.onFocus = function () {\n            _this.ionFocus.emit();\n        };\n        this.onBlur = function () {\n            _this.ionBlur.emit();\n        };\n        this.onClick = function () {\n            if (_this.checked) {\n                _this.ionDeselect.emit();\n            }\n            else {\n                _this.checked = true;\n            }\n        };\n        this.ionRadioDidLoad = createEvent(this, \"ionRadioDidLoad\", 7);\n        this.ionRadioDidUnload = createEvent(this, \"ionRadioDidUnload\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\n        this.ionDeselect = createEvent(this, \"ionDeselect\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    }\n    Radio.prototype.colorChanged = function () {\n        this.emitStyle();\n    };\n    Radio.prototype.checkedChanged = function (isChecked) {\n        if (isChecked) {\n            this.ionSelect.emit({\n                checked: true,\n                value: this.value\n            });\n        }\n        this.emitStyle();\n    };\n    Radio.prototype.disabledChanged = function () {\n        this.emitStyle();\n    };\n    Radio.prototype.componentWillLoad = function () {\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        this.emitStyle();\n    };\n    Radio.prototype.componentDidLoad = function () {\n        this.ionRadioDidLoad.emit();\n    };\n    Radio.prototype.componentDidUnload = function () {\n        this.ionRadioDidUnload.emit();\n    };\n    Radio.prototype.emitStyle = function () {\n        this.ionStyle.emit({\n            'radio-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    };\n    Radio.prototype.render = function () {\n        var _a;\n        var _b = this, inputId = _b.inputId, disabled = _b.disabled, checked = _b.checked, color = _b.color, el = _b.el;\n        var mode = getIonMode(this);\n        var labelId = inputId + '-lbl';\n        var label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { onClick: this.onClick, role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": \"\" + checked, \"aria-labelledby\": labelId, class: Object.assign({}, createColorClasses(color), (_a = {}, _a[mode] = true, _a['in-item'] = hostContext('ion-item', el), _a['interactive'] = true, _a['radio-checked'] = checked, _a['radio-disabled'] = disabled, _a)) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\n    };\n    Object.defineProperty(Radio.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Radio, \"watchers\", {\n        get: function () {\n            return {\n                \"color\": [\"colorChanged\"],\n                \"checked\": [\"checkedChanged\"],\n                \"disabled\": [\"disabledChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Radio, \"style\", {\n        get: function () { return \":host{display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color-checked:var(--ion-color-primary,#3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:50%;left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:8px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return Radio;\n}());\nvar radioButtonIds = 0;\nvar RadioGroup = /** @class */ (function () {\n    function RadioGroup(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = \"ion-rg-\" + radioGroupIds++;\n        this.labelId = this.inputId + \"-lbl\";\n        this.radios = [];\n        /**\n         * If `true`, the radios can be deselected.\n         */\n        this.allowEmptySelection = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n    }\n    RadioGroup.prototype.valueChanged = function (value) {\n        this.updateRadios();\n        this.ionChange.emit({ value: value });\n    };\n    RadioGroup.prototype.onRadioDidLoad = function (ev) {\n        var radio = ev.target;\n        radio.name = this.name;\n        // add radio to internal list\n        this.radios.push(radio);\n        // this radio-group does not have a value\n        // but this radio is checked, so let's set the\n        // radio-group's value from the checked radio\n        if (this.value == null && radio.checked) {\n            this.value = radio.value;\n        }\n        else {\n            this.updateRadios();\n        }\n    };\n    RadioGroup.prototype.onRadioDidUnload = function (ev) {\n        var index = this.radios.indexOf(ev.target);\n        if (index > -1) {\n            this.radios.splice(index, 1);\n        }\n    };\n    RadioGroup.prototype.onRadioSelect = function (ev) {\n        var selectedRadio = ev.target;\n        if (selectedRadio) {\n            this.value = selectedRadio.value;\n        }\n    };\n    RadioGroup.prototype.onRadioDeselect = function (ev) {\n        if (this.allowEmptySelection) {\n            var selectedRadio = ev.target;\n            if (selectedRadio) {\n                selectedRadio.checked = false;\n                this.value = undefined;\n            }\n        }\n    };\n    RadioGroup.prototype.componentDidLoad = function () {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        var header = this.el.querySelector('ion-list-header');\n        if (!header) {\n            header = this.el.querySelector('ion-item-divider');\n        }\n        if (header) {\n            var label = header.querySelector('ion-label');\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n        this.updateRadios();\n    };\n    RadioGroup.prototype.updateRadios = function () {\n        var value = this.value;\n        var hasChecked = false;\n        for (var _i = 0, _a = this.radios; _i < _a.length; _i++) {\n            var radio = _a[_i];\n            if (!hasChecked && radio.value === value) {\n                // correct value for this radio\n                // but this radio isn't checked yet\n                // and we haven't found a checked yet\n                hasChecked = true;\n                radio.checked = true;\n            }\n            else {\n                // this radio doesn't have the correct value\n                // or the radio group has been already checked\n                radio.checked = false;\n            }\n        }\n    };\n    RadioGroup.prototype.hostData = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return {\n            'role': 'radiogroup',\n            'aria-labelledby': this.labelId,\n            class: (_a = {},\n                _a[mode] = true,\n                _a)\n        };\n    };\n    Object.defineProperty(RadioGroup.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RadioGroup, \"watchers\", {\n        get: function () {\n            return {\n                \"value\": [\"valueChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RadioGroup.prototype.render = function () { return h(Host, this.hostData()); };\n    return RadioGroup;\n}());\nvar radioGroupIds = 0;\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\n"],"sourceRoot":""}