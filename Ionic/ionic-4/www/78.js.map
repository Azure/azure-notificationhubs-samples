{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/legacy/ion-split-pane-ios.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA8H;AACjG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAW;AAC9C;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAA+C;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAU;AAC7B;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ,4DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,8CAA8C,QAAQ,4DAAC,CAAC,oDAAI,mBAAmB;AAC/E;AACA,0BAA0B,wBAAwB,OAAO,QAAQ,MAAM,SAAS,oBAAoB,aAAa,kBAAkB,uBAAuB,mBAAmB,qBAAqB,iBAAiB,eAAe,0EAA0E,OAAO,QAAQ,MAAM,SAAS,kBAAkB,WAAW,OAAO,kCAAkC,0BAA0B,UAAU,6GAA6G,oBAAoB,aAAa,oBAAoB,cAAc,+BAA+B,aAAa,qCAAqC,kBAAkB,SAAS,+CAA+C,iBAAiB,QAAQ,gBAAgB,6GAA6G,oDAAoD,gBAAgB,cAAc,2BAA2B,cAAc,8DAA8D,gBAAgB,cAAc,eAAe,0BAA0B,EAAE,EAAE;AACzpC;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuC","file":"78.js","sourcesContent":["import { r as registerInstance, c as createEvent, d as getIonMode, e as getElement, h, H as Host } from './chunk-f257aad1.js';\nimport './chunk-1074393c.js';\nvar SPLIT_PANE_MAIN = 'split-pane-main';\nvar SPLIT_PANE_SIDE = 'split-pane-side';\nvar QUERY = {\n    'xs': '(min-width: 0px)',\n    'sm': '(min-width: 576px)',\n    'md': '(min-width: 768px)',\n    'lg': '(min-width: 992px)',\n    'xl': '(min-width: 1200px)',\n    'never': ''\n};\nvar SplitPane = /** @class */ (function () {\n    function SplitPane(hostRef) {\n        registerInstance(this, hostRef);\n        this.visible = false;\n        /**\n         * If `true`, the split pane will be hidden.\n         */\n        this.disabled = false;\n        /**\n         * When the split-pane should be shown.\n         * Can be a CSS media query expression, or a shortcut expression.\n         * Can also be a boolean expression.\n         */\n        this.when = QUERY['lg'];\n        this.ionSplitPaneVisible = createEvent(this, \"ionSplitPaneVisible\", 7);\n    }\n    SplitPane.prototype.visibleChanged = function (visible) {\n        var detail = { visible: visible, isPane: this.isPane.bind(this) };\n        this.ionSplitPaneVisible.emit(detail);\n    };\n    SplitPane.prototype.componentDidLoad = function () {\n        this.styleChildren();\n        this.updateState();\n    };\n    SplitPane.prototype.componentDidUnload = function () {\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n    };\n    SplitPane.prototype.updateState = function () {\n        var _this = this;\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n        // Check if the split-pane is disabled\n        if (this.disabled) {\n            this.visible = false;\n            return;\n        }\n        // When query is a boolean\n        var query = this.when;\n        if (typeof query === 'boolean') {\n            this.visible = query;\n            return;\n        }\n        // When query is a string, let's find first if it is a shortcut\n        var mediaQuery = QUERY[query] || query;\n        // Media query is empty or null, we hide it\n        if (mediaQuery.length === 0) {\n            this.visible = false;\n            return;\n        }\n        if (window.matchMedia) {\n            // Listen on media query\n            var callback_1 = function (q) {\n                _this.visible = q.matches;\n            };\n            var mediaList_1 = window.matchMedia(mediaQuery);\n            mediaList_1.addListener(callback_1);\n            this.rmL = function () { return mediaList_1.removeListener(callback_1); };\n            this.visible = mediaList_1.matches;\n        }\n    };\n    SplitPane.prototype.isPane = function (element) {\n        if (!this.visible) {\n            return false;\n        }\n        return element.parentElement === this.el\n            && element.classList.contains(SPLIT_PANE_SIDE);\n    };\n    SplitPane.prototype.styleChildren = function () {\n        var contentId = this.contentId;\n        var children = this.el.children;\n        var nu = this.el.childElementCount;\n        var foundMain = false;\n        for (var i = 0; i < nu; i++) {\n            var child = children[i];\n            var isMain = contentId !== undefined ? child.id === contentId : child.hasAttribute('main');\n            if (isMain) {\n                if (foundMain) {\n                    console.warn('split pane cannot have more than one main node');\n                    return;\n                }\n                foundMain = true;\n            }\n            setPaneClass(child, isMain);\n        }\n        if (!foundMain) {\n            console.warn('split pane does not have a specified main node');\n        }\n    };\n    SplitPane.prototype.hostData = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return {\n            class: (_a = {},\n                _a[mode] = true,\n                // Used internally for styling\n                _a[\"split-pane-\" + mode] = true,\n                _a['split-pane-visible'] = this.visible,\n                _a)\n        };\n    };\n    Object.defineProperty(SplitPane.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitPane, \"watchers\", {\n        get: function () {\n            return {\n                \"visible\": [\"visibleChanged\"],\n                \"disabled\": [\"updateState\"],\n                \"when\": [\"updateState\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitPane.prototype.render = function () { return h(Host, this.hostData()); };\n    Object.defineProperty(SplitPane, \"style\", {\n        get: function () { return \"ion-split-pane{left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}.split-pane-visible>.split-pane-main,.split-pane-visible>.split-pane-side{left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none!important;box-shadow:none!important;z-index:0}.split-pane-visible>.split-pane-side:not(ion-menu),.split-pane-visible>ion-menu.split-pane-side.menu-enabled{display:-ms-flexbox;display:flex;-ms-flex-negative:0;flex-shrink:0}.split-pane-side:not(ion-menu){display:none}.split-pane-visible>.split-pane-side{-ms-flex-order:-1;order:-1}.split-pane-visible>.split-pane-side[side=end]{-ms-flex-order:1;order:1}.split-pane-ios{--border:0.55px solid var(--ion-item-border-color,var(--ion-border-color,var(--ion-color-step-150,#c8c7cc)))}.split-pane-ios.split-pane-visible>.split-pane-side{min-width:270px;max-width:28%;border-right:var(--border);border-left:0}.split-pane-ios.split-pane-visible>.split-pane-side[side=end]{min-width:270px;max-width:28%;border-right:0;border-left:var(--border)}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return SplitPane;\n}());\nfunction setPaneClass(el, isMain) {\n    var toAdd;\n    var toRemove;\n    if (isMain) {\n        toAdd = SPLIT_PANE_MAIN;\n        toRemove = SPLIT_PANE_SIDE;\n    }\n    else {\n        toAdd = SPLIT_PANE_SIDE;\n        toRemove = SPLIT_PANE_MAIN;\n    }\n    var classList = el.classList;\n    classList.add(toAdd);\n    classList.remove(toRemove);\n}\nexport { SplitPane as ion_split_pane };\n"],"sourceRoot":""}